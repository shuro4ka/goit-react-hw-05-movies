{"version":3,"file":"static/js/879.8b13f69d.chunk.js","mappings":"oPACA,GAAiB,E,SCGJA,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAEA,OACE,mBAAQC,UAAWC,EAAAA,UAAnB,UACE,kBAAMD,UAAWC,EAAAA,WAAmBL,SAAUA,EAA9C,WACE,mBAAQM,KAAK,SAASF,UAAWC,EAAAA,iBAAjC,UACE,iBAAMD,UAAU,eAAhB,uBAGF,kBACEA,UAAWC,EAAAA,gBACXC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,2BACZC,SAAU,SAACC,GAAOR,EAAcQ,EAAEC,OAAOC,MAAO,EAChDA,MAAOX,QAKhB,E,mBCtBKY,EAAgBC,EAAAA,GAAAA,IAAH,0CAIbC,EAAaD,EAAAA,GAAAA,GAAH,gFAMVE,EAAWF,EAAAA,GAAAA,GAAH,0IAORG,GAAYH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,mKAQTK,EAAcL,EAAAA,GAAAA,IAAH,yCAIXM,EAAWN,EAAAA,GAAAA,GAAH,sDCuDd,EAvEe,WAAO,IAAD,EACbO,GAAWC,EAAAA,EAAAA,MACjB,GAA4BtB,EAAAA,EAAAA,UAAS,IAArC,eAAOuB,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAWMC,EAAW,UAAGF,EAAaG,IAAI,iBAApB,QAAiC,IAElDC,EAAAA,EAAAA,YAAU,WACY,KAAhBF,EAKJG,YAAW,YACVC,EAAAA,EAAAA,IAAkBJ,GAAaK,MAAK,SAACC,GACpCV,EAAUU,EAAKC,QACf,GACD,GAAE,KARDX,EAAU,GASb,GAAE,CAACI,IAEJ,IAAMQ,GAAgBC,EAAAA,EAAAA,UAAQ,WAC5B,OAAOd,EAAOe,QACZ,SAAAC,GAAK,OACHA,EAAMC,eAAe,UACrBD,EAAME,MAAMC,cAAcC,SAASf,EAAYc,cAF5C,GAIR,GAAE,CAACd,EAAaL,IAEjB,OACE,UAACV,EAAD,YACE,SAACf,EAAD,CAAWC,SA/BE,SAACW,GAChBA,EAAEkC,iBACF,IAAM3C,EAAaS,EAAEmC,cAAcC,SAAS,GAAGlC,MAC/Ce,EAA+B,KAAf1B,EAAoB,CAAEqC,OAAQrC,GAAe,CAAC,EAC/D,IA4BImC,EAAcW,OAAS,IACtB,SAAChC,EAAD,UACGqB,EAAcY,KAAI,SAAAT,GAAK,OACtB,SAACvB,EAAD,WACE,UAACC,EAAD,CAAWgC,GAAE,UAAKV,EAAMW,IAAMC,MAAO,CAAEC,KAAM/B,GAA7C,UACGkB,EAAMc,aACL,gBAAKC,IAxCJ,kCAwCoBf,EAAMc,YAAaE,IAAI,YAE5C,SAACpC,EAAD,CACEmC,IAAI,6DACJC,IAAI,yBAIR,SAACnC,EAAD,UAAWmB,EAAME,YAXNF,EAAMW,GADC,QA2BjC,C","sources":["components/Searchbar/Searchbar.module.css","components/Searchbar/Searchbar.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import styles from './Searchbar.module.css';\nimport {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Searchbar = ({ onSubmit }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  return (\n    <header className={styles.Searchbar}>\n      <form className={styles.SearchForm} onSubmit={onSubmit}>\n        <button type=\"submit\" className={styles.SearchFormButton}>\n          <span className=\"button-label\">Search</span>\n        </button>\n\n        <input\n          className={styles.SearchFormInput}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n          onChange={(e) => {setInputValue(e.target.value)}}\n          value={inputValue}\n        />\n      </form>\n    </header>\n  );\n}\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};","// import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst ListContainer = styled.div`\n  padding: 20px;\n`;\n\nconst MoviesList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin: -10px;\n`;\n\nconst ListItem = styled.li`\n  margin: 10px;\n  padding: 15px;\n  border-radius: 10px;\n  transition: all 400ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nconst MovieLink = styled(NavLink)`\n  display: block;\n  max-width: 190px;\n  text-align: center;\n  overflow: hidden;\n  transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nconst NoImageAvlb = styled.img`\n  width: 185px;\n`;\n\nconst MovTitle = styled.h2`\n  text-transform: uppercase;\n`;\n\nexport {\n  ListContainer,\n  MoviesList,\n  ListItem,\n  MovieLink,\n  NoImageAvlb,\n  MovTitle,\n};\n","import { useMemo } from 'react';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { getSearchedMovies } from 'service/api';\nimport { Searchbar } from 'components/Searchbar/Searchbar';\n// import Pagination from 'components/Pagination/Pagination';\n\nimport {\n  ListContainer,\n  MoviesList,\n  ListItem,\n  MovieLink,\n  NoImageAvlb,\n  MovTitle,\n} from './Movies.styled';\n\n\nconst Movies = () => {\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n\n  const imageURL = 'https://image.tmdb.org/t/p/w185';\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const inputValue = e.currentTarget.elements[1].value;\n    setSearchParams(inputValue !== '' ? { filter: inputValue } : {});\n  };\n\n  const filterParam = searchParams.get('filter') ?? '';\n\n  useEffect(() => {\n    if (filterParam === '') {\n      setMovies([]);\n      return;\n    }\n\n    setTimeout(() => {\n     getSearchedMovies(filterParam).then((data) => {\n      setMovies(data.results);\n     });\n    }, 200);\n  }, [filterParam]);\n\n  const visibleMovies = useMemo(() => {\n    return movies.filter(\n      movie =>\n        movie.hasOwnProperty('title') &&\n        movie.title.toLowerCase().includes(filterParam.toLowerCase())\n    );\n  }, [filterParam, movies]);\n\n  return (\n    <ListContainer>\n      <Searchbar onSubmit={onSubmit} />\n      {visibleMovies.length > 0 && (\n        <MoviesList>\n          {visibleMovies.map(movie => (\n            <ListItem key={movie.id}>\n              <MovieLink to={`${movie.id}`} state={{ from: location }}>\n                {movie.poster_path ? (\n                  <img src={imageURL + movie.poster_path} alt=\"Poster\" />\n                ) : (\n                  <NoImageAvlb\n                    src=\"https://bpgroup.lv/i/product_images/images/Z2000128443.jpg\"\n                    alt=\"No Poster Available\"\n                  />\n                )}\n\n                <MovTitle>{movie.title}</MovTitle>\n              </MovieLink>\n            </ListItem>\n          ))}\n        </MoviesList>\n      )}\n\n      {/* <Pagination\n        total={Number(100)}\n        limit={Number(20)}\n        page={page}\n        setPage={setPage}\n      /> */}\n    </ListContainer>\n  );\n};\n\nexport default Movies;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import { useLocation, useSearchParams } from 'react-router-dom';\n// import { useState } from 'react';\n// import { getSearchedMovies } from 'service/api';\n// import { useEffect } from 'react';\n// import { MoviesList } from 'components/MoviesList/MoviesList';\n// import { Searchbar } from 'components/Searchbar/Searchbar';\n\n\n//   const MoviesView = props => {\n//   const [searchParams, setSearchParams] = useSearchParams();\n//   const [searchResults, setSearchResults] = useState([]);\n//   //const [isLoading, setIsLoading] = useState(false);\n//   const query = searchParams.get('query');\n//   const location = useLocation();\n\n\n//   useEffect(() => {\n//     query && setIsLoading(true);\n//     query &&\n//       getSearchedMovies(query).then(data => {\n//         if (data.length > 0) {\n//           console.log(data);\n//           setSearchResults(data);\n//           setIsLoading(false);\n//         } else {\n//           alert('Sorry, movies are not found');\n//           setIsLoading(false);\n//         }\n//       });\n//   }, [query]);\n\n//   const submitHandler = e => {\n//     e.preventDefault();\n//     if (e.target[0].value === '') {\n//       alert('Please write the name of the movie');\n//       return;\n//     }\n\n//     const changeFilter = value => {\n//       setSearchParams(value !== '' ? { filter: value } : {});\n//     };\n  \n\n//     const query = e.target[0].value;\n//     setSearchParams({ query });\n//   };\n\n//   <ListContainer>\n//   <Searchbar value={filterParam} onChange={changeFilter} />\n//   {MoviesView.length > 0 && (\n//     <MoviesList>\n//       {visibleMovies.map(movie => (\n//         <ListItem key={movie.id}>\n//           <MovieLink to={`${movie.id}`} state={{ from: location }}>\n//             {movie.poster_path ? (\n//               <img src={imageURL + movie.poster_path} alt=\"Poster\" />\n//             ) : (\n//               <NoImageAvlb\n//                 src=\"https://bpgroup.lv/i/product_images/images/Z2000128443.jpg\"\n//                 alt=\"No Poster Available\"\n//               />\n//             )}\n\n//             <MovTitle>{movie.title}</MovTitle>\n//           </MovieLink>\n//         </ListItem>\n//       ))}\n//     </MoviesList>\n//   )}\n\n//   {/* <Pagination\n//     total={Number(100)}\n//     limit={Number(20)}\n//     page={page}\n//     setPage={setPage}\n//   /> */}\n// </ListContainer>\n\n//   };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  // return (\n  //   <div>\n  //     <form onSubmit={e => submitHandler(e)}>\n  //       <input type=\"text\" />\n  //       <button type=\"submit\">submit</button>\n  //     </form>\n  //     {isLoading}\n  //     {query && searchResults.length > 0 && (\n  //       <MoviesList moviesData={searchResults} location={location} />\n  //     )}\n  //   </div>\n  // );\n//};\n\n"],"names":["Searchbar","onSubmit","useState","inputValue","setInputValue","className","styles","type","autoComplete","autoFocus","placeholder","onChange","e","target","value","ListContainer","styled","MoviesList","ListItem","MovieLink","NavLink","NoImageAvlb","MovTitle","location","useLocation","movies","setMovies","useSearchParams","searchParams","setSearchParams","filterParam","get","useEffect","setTimeout","getSearchedMovies","then","data","results","visibleMovies","useMemo","filter","movie","hasOwnProperty","title","toLowerCase","includes","preventDefault","currentTarget","elements","length","map","to","id","state","from","poster_path","src","alt"],"sourceRoot":""}